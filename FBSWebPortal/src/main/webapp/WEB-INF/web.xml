<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
         
  <display-name>FBS Web Portal</display-name>
  
  <!-- load root context, and define spring bean configurations that will be visible to all other contexts-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-fbs.xml</param-value>
  </context-param>
  <!-- load root context -->
  
  <!-- initialization of the WebApplicationContext, which is the child context of the application context. 
       Each DispatcherServlet defined in a Spring web application will have an associated WebApplicationContext. -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>
       org.springframework.web.servlet.DispatcherServlet
    </servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring-fbs-web.xml</param-value>    <!-- load web related stuff from here like Controller, View resolvers... -->
    </init-param> 
    <load-on-startup>2</load-on-startup>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>*.action</url-pattern>
  </servlet-mapping>

  <!-- make Hibernate Sessions available via the current thread -->
	<filter>
	  <filter-name>hibernateFilter</filter-name>
	  <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
	  <init-param>
		 <param-name>sessionFactoryBeanName</param-name>
		 <param-value>sessionFactory</param-value>         
      </init-param>      
	</filter>
	
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping> 

<!-- 
    temporary comment this listened because it will cause request parameter map become empty  -->
    <listener>
       <listener-class>
          sg.com.fbs.validator.web.servlet.ValidationListener
       </listener-class>
    </listener>

   <listener>
	<listener-class>
	org.springframework.security.web.session.HttpSessionEventPublisher
	</listener-class>
   </listener>

   <session-config>
      <session-timeout>40</session-timeout>  <!-- in minutes -->
      <tracking-mode>COOKIE</tracking-mode>
   </session-config>
   
   
   <!--  Spring Security Config -->
   <!-- Spring's DelegatingFilterProxy provides the link between web.xml and the application context. -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--  Spring Security Config -->

   <filter>
      <filter-name>ValidationWebContextFilter</filter-name>
      <filter-class>sg.com.fbs.validator.web.common.ValidationWebContextFilter</filter-class> 
   </filter>
   <filter-mapping>
      <filter-name>ValidationWebContextFilter</filter-name>
      <url-pattern>/*</url-pattern>
   </filter-mapping>
   
   
   
   
   <jsp-config>
      <taglib>
        <taglib-uri>/tags/netui</taglib-uri>
        <taglib-location>/WEB-INF/tags/netui.tld</taglib-location>
      </taglib>
      
      <taglib>
         <taglib-uri>/tags/security</taglib-uri>
         <taglib-location>/WEB-INF/tags/security.tld</taglib-location>
      </taglib>
      
      
   </jsp-config>

</web-app>
