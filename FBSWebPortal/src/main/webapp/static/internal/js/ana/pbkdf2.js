var Rcon = [ 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47,
		94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145 ], S = [
		99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171,
		118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156,
		164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241,
		113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226,
		235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179,
		41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57,
		74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127,
		80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218,
		33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167,
		126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238,
		184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211,
		172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108,
		86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198,
		232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246,
		14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217,
		142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191,
		230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 ], T1 = [ 2774754246,
		2222750968, 2574743534, 2373680118, 234025727, 3177933782, 2976870366,
		1422247313, 1345335392, 50397442, 2842126286, 2099981142, 436141799,
		1658312629, 3870010189, 2591454956, 1170918031, 2642575903, 1086966153,
		2273148410, 368769775, 3948501426, 3376891790, 200339707, 3970805057,
		1742001331, 4255294047, 3937382213, 3214711843, 4154762323, 2524082916,
		1539358875, 3266819957, 486407649, 2928907069, 1780885068, 1513502316,
		1094664062, 49805301, 1338821763, 1546925160, 4104496465, 887481809,
		150073849, 2473685474, 1943591083, 1395732834, 1058346282, 201589768,
		1388824469, 1696801606, 1589887901, 672667696, 2711000631, 251987210,
		3046808111, 151455502, 907153956, 2608889883, 1038279391, 652995533,
		1764173646, 3451040383, 2675275242, 453576978, 2659418909, 1949051992,
		773462580, 756751158, 2993581788, 3998898868, 4221608027, 4132590244,
		1295727478, 1641469623, 3467883389, 2066295122, 1055122397, 1898917726,
		2542044179, 4115878822, 1758581177, 0, 753790401, 1612718144,
		536673507, 3367088505, 3982187446, 3194645204, 1187761037, 3653156455,
		1262041458, 3729410708, 3561770136, 3898103984, 1255133061, 1808847035,
		720367557, 3853167183, 385612781, 3309519750, 3612167578, 1429418854,
		2491778321, 3477423498, 284817897, 100794884, 2172616702, 4031795360,
		1144798328, 3131023141, 3819481163, 4082192802, 4272137053, 3225436288,
		2324664069, 2912064063, 3164445985, 1211644016, 83228145, 3753688163,
		3249976951, 1977277103, 1663115586, 806359072, 452984805, 250868733,
		1842533055, 1288555905, 336333848, 890442534, 804056259, 3781124030,
		2727843637, 3427026056, 957814574, 1472513171, 4071073621, 2189328124,
		1195195770, 2892260552, 3881655738, 723065138, 2507371494, 2690670784,
		2558624025, 3511635870, 2145180835, 1713513028, 2116692564, 2878378043,
		2206763019, 3393603212, 703524551, 3552098411, 1007948840, 2044649127,
		3797835452, 487262998, 1994120109, 1004593371, 1446130276, 1312438900,
		503974420, 3679013266, 168166924, 1814307912, 3831258296, 1573044895,
		1859376061, 4021070915, 2791465668, 2828112185, 2761266481, 937747667,
		2339994098, 854058965, 1137232011, 1496790894, 3077402074, 2358086913,
		1691735473, 3528347292, 3769215305, 3027004632, 4199962284, 133494003,
		636152527, 2942657994, 2390391540, 3920539207, 403179536, 3585784431,
		2289596656, 1864705354, 1915629148, 605822008, 4054230615, 3350508659,
		1371981463, 602466507, 2094914977, 2624877800, 555687742, 3712699286,
		3703422305, 2257292045, 2240449039, 2423288032, 1111375484, 3300242801,
		2858837708, 3628615824, 84083462, 32962295, 302911004, 2741068226,
		1597322602, 4183250862, 3501832553, 2441512471, 1489093017, 656219450,
		3114180135, 954327513, 335083755, 3013122091, 856756514, 3144247762,
		1893325225, 2307821063, 2811532339, 3063651117, 572399164, 2458355477,
		552200649, 1238290055, 4283782570, 2015897680, 2061492133, 2408352771,
		4171342169, 2156497161, 386731290, 3669999461, 837215959, 3326231172,
		3093850320, 3275833730, 2962856233, 1999449434, 286199582, 3417354363,
		4233385128, 3602627437, 974525996 ], T2 = [ 1667483301, 2088564868,
		2004348569, 2071721613, 4076011277, 1802229437, 1869602481, 3318059348,
		808476752, 16843267, 1734856361, 724260477, 4278118169, 3621238114,
		2880130534, 1987505306, 3402272581, 2189565853, 3385428288, 2105408135,
		4210749205, 1499050731, 1195871945, 4042324747, 2913812972, 3570709351,
		2728550397, 2947499498, 2627478463, 2762232823, 1920132246, 3233848155,
		3082253762, 4261273884, 2475900334, 640044138, 909536346, 1061125697,
		4160222466, 3435955023, 875849820, 2779075060, 3857043764, 4059166984,
		1903288979, 3638078323, 825320019, 353708607, 67373068, 3351745874,
		589514341, 3284376926, 404238376, 2526427041, 84216335, 2593796021,
		117902857, 303178806, 2155879323, 3806519101, 3958099238, 656887401,
		2998042573, 1970662047, 151589403, 2206408094, 741103732, 437924910,
		454768173, 1852759218, 1515893998, 2694863867, 1381147894, 993752653,
		3604395873, 3014884814, 690573947, 3823361342, 791633521, 2223248279,
		1397991157, 3520182632, 0, 3991781676, 538984544, 4244431647,
		2981198280, 1532737261, 1785386174, 3419114822, 3200149465, 960066123,
		1246401758, 1280088276, 1482207464, 3486483786, 3503340395, 4025468202,
		2863288293, 4227591446, 1128498885, 1296931543, 859006549, 2240090516,
		1162185423, 4193904912, 33686534, 2139094657, 1347461360, 1010595908,
		2678007226, 2829601763, 1364304627, 2745392638, 1077969088, 2408514954,
		2459058093, 2644320700, 943222856, 4126535940, 3166462943, 3065411521,
		3671764853, 555827811, 269492272, 4294960410, 4092853518, 3537026925,
		3452797260, 202119188, 320022069, 3974939439, 1600110305, 2543269282,
		1145342156, 387395129, 3301217111, 2812761586, 2122251394, 1027439175,
		1684326572, 1566423783, 421081643, 1936975509, 1616953504, 2172721560,
		1330618065, 3705447295, 572671078, 707417214, 2425371563, 2290617219,
		1179028682, 4008625961, 3099093971, 336865340, 3739133817, 1583267042,
		185275933, 3688607094, 3772832571, 842163286, 976909390, 168432670,
		1229558491, 101059594, 606357612, 1549580516, 3267534685, 3553869166,
		2896970735, 1650640038, 2442213800, 2509582756, 3840201527, 2038035083,
		3890730290, 3368586051, 926379609, 1835915959, 2374828428, 3587551588,
		1313774802, 2846444000, 1819072692, 1448520954, 4109693703, 3941256997,
		1701169839, 2054878350, 2930657257, 134746136, 3132780501, 2021191816,
		623200879, 774790258, 471611428, 2795919345, 3031724999, 3334903633,
		3907570467, 3722289532, 1953818780, 522141217, 1263245021, 3183305180,
		2341145990, 2324303749, 1886445712, 1044282434, 3048567236, 1718013098,
		1212715224, 50529797, 4143380225, 235805714, 1633796771, 892693087,
		1465364217, 3115936208, 2256934801, 3250690392, 488454695, 2661164985,
		3789674808, 4177062675, 2560109491, 286335539, 1768542907, 3654920560,
		2391672713, 2492740519, 2610638262, 505297954, 2273777042, 3924412704,
		3469641545, 1431677695, 673730680, 3755976058, 2357986191, 2711706104,
		2307459456, 218962455, 3216991706, 3873888049, 1111655622, 1751699640,
		1094812355, 2576951728, 757946999, 252648977, 2964356043, 1414834428,
		3149622742, 370551866 ], T3 = [ 1673962851, 2096661628, 2012125559,
		2079755643, 4076801522, 1809235307, 1876865391, 3314635973, 811618352,
		16909057, 1741597031, 727088427, 4276558334, 3618988759, 2874009259,
		1995217526, 3398387146, 2183110018, 3381215433, 2113570685, 4209972730,
		1504897881, 1200539975, 4042984432, 2906778797, 3568527316, 2724199842,
		2940594863, 2619588508, 2756966308, 1927583346, 3231407040, 3077948087,
		4259388669, 2470293139, 642542118, 913070646, 1065238847, 4160029431,
		3431157708, 879254580, 2773611685, 3855693029, 4059629809, 1910674289,
		3635114968, 828527409, 355090197, 67636228, 3348452039, 591815971,
		3281870531, 405809176, 2520228246, 84545285, 2586817946, 118360327,
		304363026, 2149292928, 3806281186, 3956090603, 659450151, 2994720178,
		1978310517, 152181513, 2199756419, 743994412, 439627290, 456535323,
		1859957358, 1521806938, 2690382752, 1386542674, 997608763, 3602342358,
		3011366579, 693271337, 3822927587, 794718511, 2215876484, 1403450707,
		3518589137, 0, 3988860141, 541089824, 4242743292, 2977548465,
		1538714971, 1792327274, 3415033547, 3194476990, 963791673, 1251270218,
		1285084236, 1487988824, 3481619151, 3501943760, 4022676207, 2857362858,
		4226619131, 1132905795, 1301993293, 862344499, 2232521861, 1166724933,
		4192801017, 33818114, 2147385727, 1352724560, 1014514748, 2670049951,
		2823545768, 1369633617, 2740846243, 1082179648, 2399505039, 2453646738,
		2636233885, 946882616, 4126213365, 3160661948, 3061301686, 3668932058,
		557998881, 270544912, 4293204735, 4093447923, 3535760850, 3447803085,
		202904588, 321271059, 3972214764, 1606345055, 2536874647, 1149815876,
		388905239, 3297990596, 2807427751, 2130477694, 1031423805, 1690872932,
		1572530013, 422718233, 1944491379, 1623236704, 2165938305, 1335808335,
		3701702620, 574907938, 710180394, 2419829648, 2282455944, 1183631942,
		4006029806, 3094074296, 338181140, 3735517662, 1589437022, 185998603,
		3685578459, 3772464096, 845436466, 980700730, 169090570, 1234361161,
		101452294, 608726052, 1555620956, 3265224130, 3552407251, 2890133420,
		1657054818, 2436475025, 2503058581, 3839047652, 2045938553, 3889509095,
		3364570056, 929978679, 1843050349, 2365688973, 3585172693, 1318900302,
		2840191145, 1826141292, 1454176854, 4109567988, 3939444202, 1707781989,
		2062847610, 2923948462, 135272456, 3127891386, 2029029496, 625635109,
		777810478, 473441308, 2790781350, 3027486644, 3331805638, 3905627112,
		3718347997, 1961401460, 524165407, 1268178251, 3177307325, 2332919435,
		2316273034, 1893765232, 1048330814, 3044132021, 1724688998, 1217452104,
		50726147, 4143383030, 236720654, 1640145761, 896163637, 1471084887,
		3110719673, 2249691526, 3248052417, 490350365, 2653403550, 3789109473,
		4176155640, 2553000856, 287453969, 1775418217, 3651760345, 2382858638,
		2486413204, 2603464347, 507257374, 2266337927, 3922272489, 3464972750,
		1437269845, 676362280, 3752164063, 2349043596, 2707028129, 2299101321,
		219813645, 3211123391, 3872862694, 1115997762, 1758509160, 1099088705,
		2569646233, 760903469, 253628687, 2960903088, 1420360788, 3144537787,
		371997206 ], T4 = [ 3332727651, 4169432188, 4003034999, 4136467323,
		4279104242, 3602738027, 3736170351, 2438251973, 1615867952, 33751297,
		3467208551, 1451043627, 3877240574, 3043153879, 1306962859, 3969545846,
		2403715786, 530416258, 2302724553, 4203183485, 4011195130, 3001768281,
		2395555655, 4211863792, 1106029997, 3009926356, 1610457762, 1173008303,
		599760028, 1408738468, 3835064946, 2606481600, 1975695287, 3776773629,
		1034851219, 1282024998, 1817851446, 2118205247, 4110612471, 2203045068,
		1750873140, 1374987685, 3509904869, 4178113009, 3801313649, 2876496088,
		1649619249, 708777237, 135005188, 2505230279, 1181033251, 2640233411,
		807933976, 933336726, 168756485, 800430746, 235472647, 607523346,
		463175808, 3745374946, 3441880043, 1315514151, 2144187058, 3936318837,
		303761673, 496927619, 1484008492, 875436570, 908925723, 3702681198,
		3035519578, 1543217312, 2767606354, 1984772923, 3076642518, 2110698419,
		1383803177, 3711886307, 1584475951, 328696964, 2801095507, 3110654417,
		0, 3240947181, 1080041504, 3810524412, 2043195825, 3069008731,
		3569248874, 2370227147, 1742323390, 1917532473, 2497595978, 2564049996,
		2968016984, 2236272591, 3144405200, 3307925487, 1340451498, 3977706491,
		2261074755, 2597801293, 1716859699, 294946181, 2328839493, 3910203897,
		67502594, 4269899647, 2700103760, 2017737788, 632987551, 1273211048,
		2733855057, 1576969123, 2160083008, 92966799, 1068339858, 566009245,
		1883781176, 4043634165, 1675607228, 2009183926, 2943736538, 1113792801,
		540020752, 3843751935, 4245615603, 3211645650, 2169294285, 403966988,
		641012499, 3274697964, 3202441055, 899848087, 2295088196, 775493399,
		2472002756, 1441965991, 4236410494, 2051489085, 3366741092, 3135724893,
		841685273, 3868554099, 3231735904, 429425025, 2664517455, 2743065820,
		1147544098, 1417554474, 1001099408, 193169544, 2362066502, 3341414126,
		1809037496, 675025940, 2809781982, 3168951902, 371002123, 2910247899,
		3678134496, 1683370546, 1951283770, 337512970, 2463844681, 201983494,
		1215046692, 3101973596, 2673722050, 3178157011, 1139780780, 3299238498,
		967348625, 832869781, 3543655652, 4069226873, 3576883175, 2336475336,
		1851340599, 3669454189, 25988493, 2976175573, 2631028302, 1239460265,
		3635702892, 2902087254, 4077384948, 3475368682, 3400492389, 4102978170,
		1206496942, 270010376, 1876277946, 4035475576, 1248797989, 1550986798,
		941890588, 1475454630, 1942467764, 2538718918, 3408128232, 2709315037,
		3902567540, 1042358047, 2531085131, 1641856445, 226921355, 260409994,
		3767562352, 2084716094, 1908716981, 3433719398, 2430093384, 100991747,
		4144101110, 470945294, 3265487201, 1784624437, 2935576407, 1775286713,
		395413126, 2572730817, 975641885, 666476190, 3644383713, 3943954680,
		733190296, 573772049, 3535497577, 2842745305, 126455438, 866620564,
		766942107, 1008868894, 361924487, 3374377449, 2269761230, 2868860245,
		1350051880, 2776293343, 59739276, 1509466529, 159418761, 437718285,
		1708834751, 3610371814, 2227585602, 3501746280, 2193834305, 699439513,
		1517759789, 504434447, 2076946608, 2835108948, 1842789307, 742004246 ];
function B0(a) {
	return a & 255;
}
function B1(a) {
	return a >> 8 & 255;
}
function B2(a) {
	return a >> 16 & 255;
}
function B3(a) {
	return a >> 24 & 255;
}
function F1(a, b, d, c) {
	return B1(T1[a & 255]) | B1(T1[b >> 8 & 255]) << 8
			| B1(T1[d >> 16 & 255]) << 16 | B1(T1[c >>> 24]) << 24;
}
function packBytes(a) {
	var b, d, c = a.length, e = new Array(c / 4);
	if (!(!a || c % 4)) {
		for (d = b = 0; d < c; d += 4)
			e[b++] = a[d] | a[d + 1] << 8 | a[d + 2] << 16 | a[d + 3] << 24;
		return e;
	}
}
function unpackBytes(a) {
	var b, d = 0, c = a.length, e = new Array(c * 4);
	for (b = 0; b < c; b++) {
		e[d++] = B0(a[b]);
		e[d++] = B1(a[b]);
		e[d++] = B2(a[b]);
		e[d++] = B3(a[b]);
	}
	return e;
}
var maxkc = 8, maxrk = 14;
function keyExpansion(a) {
	var b, d, c, e, f = new Array(maxrk + 1), g = a.length, i = new Array(maxkc), h = new Array(
			maxkc), k = 0;
	if (g == 16) {
		e = 10;
		b = 4;
	} else if (g == 24) {
		e = 12;
		b = 6;
	} else if (g == 32) {
		e = 14;
		b = 8;
	} else {
		return;
	}
	for (d = 0; d < maxrk + 1; d++)
		f[d] = new Array(4);
	for (c = d = 0; c < g; c++, d += 4)
		i[c] = a.charCodeAt(d) | a.charCodeAt(d + 1) << 8
				| a.charCodeAt(d + 2) << 16 | a.charCodeAt(d + 3) << 24;
	for (c = b - 1; c >= 0; c--)
		h[c] = i[c];
	for (c = d = a = 0; c < b && a < e + 1;) {
		for (; c < b && d < 4; c++, d++)
			f[a][d] = h[c];
		if (d == 4) {
			a++;
			d = 0;
		}
	}
	for (; a < e + 1;) {
		c = h[b - 1];
		h[0] ^= S[B1(c)] | S[B2(c)] << 8 | S[B3(c)] << 16 | S[B0(c)] << 24;
		h[0] ^= Rcon[k++];
		if (b != 8)
			c = 1;
		else {
			for (c = 1; c < b / 2; c++)
				h[c] ^= h[c - 1];
			c = h[b / 2 - 1];
			h[b / 2] ^= S[B0(c)] | S[B1(c)] << 8 | S[B2(c)] << 16
					| S[B3(c)] << 24;
			c = b / 2 + 1;
		}
		for (; c < b; c++)
			h[c] ^= h[c - 1];
		for (c = 0; c < b && a < e + 1;) {
			for (; c < b && d < 4; c++, d++)
				f[a][d] = h[c];
			if (d == 4) {
				a++;
				d = 0;
			}
		}
	}
	this.rounds = e;
	this.rk = f;
	return this;
}
function rijndaelEncrypt(a, b) {
	var d, c, e, f, g = packBytes(a), i = b.rounds, h = g[0], k = g[1], n = g[2];
	f = g[3];
	for (a = 0; a < i - 1; a++) {
		d = h ^ b.rk[a][0];
		c = k ^ b.rk[a][1];
		e = n ^ b.rk[a][2];
		f = f ^ b.rk[a][3];
		h = T1[d & 255] ^ T2[c >> 8 & 255] ^ T3[e >> 16 & 255] ^ T4[f >>> 24];
		k = T1[c & 255] ^ T2[e >> 8 & 255] ^ T3[f >> 16 & 255] ^ T4[d >>> 24];
		n = T1[e & 255] ^ T2[f >> 8 & 255] ^ T3[d >> 16 & 255] ^ T4[c >>> 24];
		f = T1[f & 255] ^ T2[d >> 8 & 255] ^ T3[c >> 16 & 255] ^ T4[e >>> 24];
	}
	a = i - 1;
	d = h ^ b.rk[a][0];
	c = k ^ b.rk[a][1];
	e = n ^ b.rk[a][2];
	f = f ^ b.rk[a][3];
	g[0] = F1(d, c, e, f) ^ b.rk[i][0];
	g[1] = F1(c, e, f, d) ^ b.rk[i][1];
	g[2] = F1(e, f, d, c) ^ b.rk[i][2];
	g[3] = F1(f, d, c, e) ^ b.rk[i][3];
	return unpackBytes(g);
}
function byteArrayToString(a) {
	for ( var b = "", d = 0; d < a.length; d++)
		if (a[d] != 0)
			b += String.fromCharCode(a[d]);
	return b;
}
function byteArrayToHex(a) {
	var b = "";
	if (a) {
		for ( var d = 0; d < a.length; d++)
			b += (a[d] < 16 ? "0" : "") + a[d].toString(16);
		return b;
	}
}
function hexToByteArray(a) {
	var b = "";
	//start with 0x means hex
	if (a.indexOf("0x") == 0 || a.indexOf("0X") == 0){
		a = a.substr(2);
	}  

	//if(0) works as if(false)
	//if(1) works as if(true)
	if (a.length % 2){
		a += "0";
	}
		
	for ( var d = 0; d < a.length; d += 2){
		//convert unicode value to character
		b += String.fromCharCode(parseInt(a.slice(d, d + 2), 16));
	}
		
	
	return b;
}
function formatPlaintext(a) {
	var b = blockSizeInBits / 8, d;
	if (typeof a == "string" || a.indexOf) {
		a = a.split("");
		for (d = 0; d < a.length; d++)
			a[d] = a[d].charCodeAt(0) & 255;
	}
	for (d = b - a.length % b; d > 0 && d < b; d--)
		a[a.length] = 0;
	return a;
}
function getRandomBytes(a) {
	var b, d = [];
	for (b = 0; b < a; b++)
		d[b] = Math.round(Math.random() * 255);
	return d;
}
function aesEncrypt(a, b, d) {
	blockSizeInBits = keySizeInBits = b.length * 8;
	var c, e = blockSizeInBits / 8, f;
	if (a && b)
		if (b.length * 8 == keySizeInBits) {
			if (d == "CBC")
				f = getRandomBytes(e);
			else {
				d = "ECB";
				f = [];
			}
			a = formatPlaintext(a);
			for ( var g = new keyExpansion(b), i = 0; i < a.length / e; i++) {
				c = a.slice(i * e, (i + 1) * e);
				if (d == "CBC")
					for (b = 0; b < e; b++)
						c[b] ^= f[i * e + b];
				f = f.concat(rijndaelEncrypt(c, g));
			}
			return f;
		}
}
function aesEncryptCBC(a, b, d) {
	blockSizeInBits = keySizeInBits = b.length * 8;
	var c, e = blockSizeInBits / 8;
//	d = d;
	if (a && b)
		if (b.length * 8 == keySizeInBits) {
			a = formatPlaintext(a);
			for ( var f = new keyExpansion(b), g = 0; g < a.length / e; g++) {
				c = a.slice(g * e, (g + 1) * e);
				for (b = 0; b < e; b++)
					c[b] ^= d[g * e + b];
				d = d.concat(rijndaelEncrypt(c, f));
			}
			return d;
		}
};
var hexcase = 0, b64pad = "=", chrsz = 8;
function hex_sha1(a) {
	return binb2hex(core_sha1(str2binb(a), a.length * chrsz));
}
function b64_sha1(a) {
	return binb2b64(core_sha1(str2binb(a), a.length * chrsz));
}
function str_sha1(a) {
	return binb2str(core_sha1(str2binb(a), a.length * chrsz));
}
function binb_sha1(a) {
	return core_sha1(str2binb(a), a.length * chrsz);
}
function hex_hmac_sha1(a, b) {
	return binb2hex(core_hmac_sha1(a, b));
}
function b64_hmac_sha1(a, b) {
	return binb2b64(core_hmac_sha1(a, b));
}
function str_hmac_sha1(a, b) {
	return binb2str(core_hmac_sha1(a, b));
}
//function sha1_vm_test() {
//	return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
//}
function core_sha1(a, b) {
	a[b >> 5] |= 128 << 24 - b % 32;
	a[(b + 64 >> 9 << 4) + 15] = b;
	b = Array(80);
	for ( var d = 1732584193, c = -271733879, e = -1732584194, f = 271733878, g = -1009589776, i = 0; i < a.length; i += 16) {
		for ( var h = d, k = c, n = e, p = f, l = g, j = 0; j < 80; j++) {
			b[j] = j < 16 ? a[i + j] : rol(b[j - 3] ^ b[j - 8] ^ b[j - 14]
					^ b[j - 16], 1);
			var q = safe_add(safe_add(rol(d, 5), sha1_ft(j, c, e, f)),
					safe_add(safe_add(g, b[j]), sha1_kt(j)));
			g = f;
			f = e;
			e = rol(c, 30);
			c = d;
			d = q;
		}
		d = safe_add(d, h);
		c = safe_add(c, k);
		e = safe_add(e, n);
		f = safe_add(f, p);
		g = safe_add(g, l);
	}
	return Array(d, c, e, f, g);
}
function sha1_ft(a, b, d, c) {
	if (a < 20)
		return b & d | ~b & c;
	if (a < 40)
		return b ^ d ^ c;
	if (a < 60)
		return b & d | b & c | d & c;
	return b ^ d ^ c;
}
function sha1_kt(a) {
	return a < 20 ? 1518500249 : a < 40 ? 1859775393 : a < 60 ? -1894007588
			: -899497514;
}
function core_hmac_sha1(a, b) {
	var d = str2binb(a);
	if (d.length > 16)
		d = core_sha1(d, a.length * chrsz);
	var c = Array(16);
	a = Array(16);
	for ( var e = 0; e < 16; e++) {
		c[e] = d[e] ^ 909522486;
		a[e] = d[e] ^ 1549556828;
	}
	b = core_sha1(c.concat(str2binb(b)), 512 + b.length * chrsz);
	return core_sha1(a.concat(b), 672);
}
function safe_add(a, b) {
	var d = (a & 65535) + (b & 65535);
	a = (a >> 16) + (b >> 16) + (d >> 16);
	return a << 16 | d & 65535;
}
function rol(a, b) {
	return a << b | a >>> 32 - b;
}
function str2binb(a) {
	for ( var b = Array(), d = (1 << chrsz) - 1, c = 0; c < a.length * chrsz; c += chrsz)
		b[c >> 5] |= (a.charCodeAt(c / chrsz) & d) << 32 - chrsz - c % 32;
	return b;
}
function binb2str(a) {
	for ( var b = "", d = (1 << chrsz) - 1, c = 0; c < a.length * 32; c += chrsz)
		b += String.fromCharCode(a[c >> 5] >>> 32 - chrsz - c % 32 & d);
	return b;
}
function binb2hex(a) {
	for ( var b = hexcase ? "0123456789ABCDEF" : "0123456789abcdef", d = "", c = 0; c < a.length * 4; c++)
		d += b.charAt(a[c >> 2] >> (3 - c % 4) * 8 + 4 & 15)
				+ b.charAt(a[c >> 2] >> (3 - c % 4) * 8 & 15);
	return d;
}
function binb2b64(a) {
	for ( var b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", d = "", c = 0; c < a.length * 4; c += 3)
		for ( var e = (a[c >> 2] >> 8 * (3 - c % 4) & 255) << 16
				| (a[c + 1 >> 2] >> 8 * (3 - (c + 1) % 4) & 255) << 8
				| a[c + 2 >> 2] >> 8 * (3 - (c + 2) % 4) & 255, f = 0; f < 4; f++)
			d += c * 8 + f * 6 > a.length * 32 ? b64pad : b
					.charAt(e >> 6 * (3 - f) & 63);
	return d;
};
function PBKDF2(a, b, d, c) {
	var e = str2binb(a), f = b, g = d, i = 10, h = 0, k = c, n = 20, p = Math
			.ceil(k / n), l = 1, j = new Array(16), q = new Array(16), r = new Array(
			0, 0, 0, 0, 0), t = "", v, w;
	if (e.length > 16)
		e = core_sha1(e, a.length * chrsz);
	for (a = 0; a < 16; ++a) {
		j[a] = e[a] ^ 909522486;
		q[a] = e[a] ^ 1549556828;
	}
	this.deriveKey = function(o, s) {
		w = o;
		v = s;
		var m = this;
		setTimeout(function() {
			m.do_PBKDF2_iterations();
		}, 0);
	};
	this.do_PBKDF2_iterations = function() {
		var o = i;
		if (g - h < i)
			o = g - h;
		for ( var s = 0; s < o; ++s) {
			if (h == 0) {
				var m = f + String.fromCharCode(l >> 24 & 15)
						+ String.fromCharCode(l >> 16 & 15)
						+ String.fromCharCode(l >> 8 & 15)
						+ String.fromCharCode(l & 15);
				m_hash = core_sha1(j.concat(str2binb(m)), 512 + m.length * 8);
			} else
				m_hash = core_sha1(j.concat(m_hash), 512 + m_hash.length * 32);
			m_hash = core_sha1(q.concat(m_hash), 672);
			for (m = 0; m < m_hash.length; ++m)
				r[m] ^= m_hash[m];
			h++;
		}
		w((l - 1 + h / g) / p * 100);
		if (h < g) {
			var u = this;
			setTimeout(function() {
				u.do_PBKDF2_iterations();
			}, 0);
		} else if (l < p) {
			t += binb2hex(r);
			l++;
			r = new Array(0, 0, 0, 0, 0);
			h = 0;
			u = this;
			setTimeout(function() {
				u.do_PBKDF2_iterations();
			}, 0);
		} else {
			o = binb2hex(r);
			t += o.substr(0, (k - (p - 1) * n) * 2);
			v(t);
		}
	};
};
